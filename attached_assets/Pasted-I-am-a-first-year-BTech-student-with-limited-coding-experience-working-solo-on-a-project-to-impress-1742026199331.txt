I am a first-year BTech student with limited coding experience, working solo on a project to impress Infosys with a groundbreaking cybersecurity solution. I need your help to create a complete, bug-free, and beginner-friendly Python model called the "Quantum-Resistant Zero Trust AI Security System" within two days. This project will be presented as a demo and pitch to Infosys, so it must be functional, visually impressive, and easy for me to understand and run. Please generate all the necessary code, functions, and explanations step-by-step. Include detailed comments for clarity, error handling to prevent crashes, and instructions for me to execute and present it. Here’s what I need:

### Project Overview
- **Goal:** Build a model that combines immediate Zero Trust security with a visionary quantum-resistant future, shocking Infosys and positioning them as a global leader in cybersecurity.
- **Components:**
  1. **Zero Trust Security Prototype:** A live system that simulates user behavior (typing speed, mouse movement), detects anomalies, and triggers a response (e.g., an alert or challenge).
  2. **Quantum Security Concept:** A conceptual explanation with visuals (no coding needed, but include instructions for PowerPoint/Canva).
  3. **"Wow Factor" Video:** A 10-15 second animation showing RSA encryption breaking under a quantum attack, with lattice-based cryptography rising to save the day.
  4. **Pitch Deck Structure:** A 7-slide outline for me to create in PowerPoint or Canva.

### Detailed Requirements

#### 1. Zero Trust Security Prototype
- **Functionality:**
  - Simulate biometric data for 100 "normal" users (typing speed ~5 keystrokes/sec, mouse movement ~300 pixels/sec) and 10 "suspicious" users (typing speed ~2 keystrokes/sec, mouse movement ~600 pixels/sec).
  - Use the Isolation Forest algorithm from scikit-learn to detect anomalies (assume 10% of data is anomalous).
  - Create a simple GUI with tkinter that:
    - Displays the current user's typing speed and mouse movement.
    - Shows an alert (e.g., pop-up) if an anomaly is detected, and a confirmation if normal.
    - Allows a "Check User" button to cycle through users.
- **Code Requirements:**
  - Use libraries: numpy, pandas, scikit-learn, tkinter.
  - Include error handling (try-except) for missing data or library issues.
  - Add comments explaining each step for a beginner.
  - Ensure the GUI runs without crashing and is easy to test.
- **Output:** A working prototype I can demo live, showing real-time anomaly detection.

#### 2. Quantum Security Concept
- **Functionality:**
  - No coding needed, but provide a detailed guide for me to create:
    - A PowerPoint/Canva slide with a visual graph showing RSA encryption strength dropping to 0 under quantum attack, while lattice-based cryptography stays at 100.
    - A second slide with a mock threat intelligence dashboard (e.g., "Quantum Computing Progress: 2025 – 50 qubits achieved").
  - Include simple text explanations (e.g., "Lattice-based cryptography resists quantum attacks").
- **Output:** Instructions for two slides I can build manually, ensuring they’re clear and professional.

#### 3. "Wow Factor" Video
- **Functionality:**
  - Create a 10-15 second animation using matplotlib.animation that:
    - Plots RSA encryption strength (starts at 100, drops to 0 over 100 frames) as a red line.
    - Plots lattice-based cryptography strength (starts at 0, rises to 100 over 100 frames) as a green line.
    - Includes labels (x-axis: "Time (Quantum Attack)", y-axis: "Encryption Strength", title: "Quantum-Resistant Security") and a legend.
  - Save the animation as an MP4 file (if ffmpeg is available) or allow it to run live.
- **Code Requirements:**
  - Use matplotlib and animation libraries.
  - Include error handling if ffmpeg isn’t installed (fall back to live display with plt.show()).
  - Add comments for each step.
- **Output:** A short, impactful video I can play during my presentation.

#### 4. Pitch Deck Structure
- **Functionality:**
  - Provide a 7-slide outline with titles and key points for me to build in PowerPoint or Canva.
  - Ensure it’s concise, persuasive, and highlights the problem, solution, demo, market opportunity, and call to action.
- **Output:** A clear structure I can follow to create the deck manually.

### Execution Plan
- **Day 1:**
  - Build the Zero Trust prototype (simulated data, anomaly detection, GUI).
  - Create the quantum security concept slides (instructions only).
  - Develop the "Wow Factor" video (rough animation).
  - Draft the pitch deck structure.
- **Day 2:**
  - Refine the Zero Trust GUI (add visuals, test thoroughly).
  - Polish the "Wow Factor" video (finalize and integrate).
  - Rehearse the presentation (5-10 minutes, with demo and video).

### Error Prevention and Support
- Include try-except blocks to handle potential errors (e.g., missing libraries, data issues).
- Provide test instructions (e.g., run the GUI with different users to check alerts).
- Add beginner-friendly comments and a final checklist for me to verify everything works before presenting.
- Ensure the code is modular (separate functions for data generation, anomaly detection, GUI) to make debugging easier.

### Final Deliverable
- A complete Python script with all components (Zero Trust prototype, "Wow Factor" video).
- Instructions for the quantum security slides and pitch deck.
- A bug-free model I can run on Replit and present to Infosys, shocking them with its innovation and professionalism.

Please generate the full code with detailed comments, the slide instructions, and the pitch deck outline. Make it simple enough for a first-year student to follow, and ensure it’s ready to impress Infosys in two days. Thank you!